{"version":3,"sources":["../../src/transactions/database.js"],"names":["createDatabase","connection","dbName","done","rethinkdb","dbList","run","databaseList","dbAlreadyExists","find","db","dbDrop","dbCreate","result","dbs_created","logger","info","dropDatabase","dbs_droped","warn"],"mappings":";;;;;;;AAIA;;AACA;;;;;;;;AAEA;;;;;;AAMO,IAAMA,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOC,UAAP,EAAmBC,MAAnB,EAA2BC,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACDC,sBAAUC,MAAV,GAAmBC,GAAnB,CAAuBL,UAAvB,CADC;;AAAA;AACtBM,YAAAA,YADsB;AAEtBC,YAAAA,eAFsB,GAEJD,YAAY,CAACE,IAAb,CAAkB,UAAAC,EAAE;AAAA,qBAAIA,EAAE,KAAKR,MAAX;AAAA,aAApB,CAFI;;AAAA,iBAIxBM,eAJwB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKpBJ,sBAAUO,MAAV,CAAiBT,MAAjB,EAAyBI,GAAzB,CAA6BL,UAA7B,EAAyCE,IAAzC,CALoB;;AAAA;AAAA;AAAA,mBAQPC,sBAAUQ,QAAV,CAAmBV,MAAnB,EAA2BI,GAA3B,CAA+BL,UAA/B,EAA2CE,IAA3C,CARO;;AAAA;AAQtBU,YAAAA,MARsB;;AAAA,iBAUxBA,MAAM,CAACC,WAViB;AAAA;AAAA;AAAA;;AAW1BC,oCAAOC,IAAP,cAAkBd,MAAlB;;AAX0B,6CAYnB,IAZmB;;AAAA;AAAA,6CAerB,KAfqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdF,cAAc;AAAA;AAAA;AAAA,GAApB;AAkBP;;;;;;;;;;AAMO,IAAMiB,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOhB,UAAP,EAAmBC,MAAnB,EAA2BC,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACCC,sBAAUC,MAAV,GAAmBC,GAAnB,CAAuBL,UAAvB,CADD;;AAAA;AACpBM,YAAAA,YADoB;AAEpBC,YAAAA,eAFoB,GAEFD,YAAY,CAACE,IAAb,CAAkB,UAAAC,EAAE;AAAA,qBAAIA,EAAE,KAAKR,MAAX;AAAA,aAApB,CAFE;;AAAA,iBAItBM,eAJsB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKHJ,sBAAUO,MAAV,CAAiBT,MAAjB,EAAyBI,GAAzB,CAA6BL,UAA7B,EAAyCE,IAAzC,CALG;;AAAA;AAKlBU,YAAAA,MALkB;;AAAA,iBAOpBA,MAAM,CAACK,UAPa;AAAA;AAAA;AAAA;;AAQtBH,oCAAOC,IAAP,cAAkBd,MAAlB;;AARsB,8CASf,IATe;;AAAA;AAa1Ba,oCAAOI,IAAP,cAAkBjB,MAAlB;;AAb0B,8CAcnB,KAdmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZe,YAAY;AAAA;AAAA;AAAA,GAAlB","sourcesContent":["/**\n * Database controls\n * @memberof rethinkly\n */\nimport rethinkdb from 'rethinkdb'\nimport logger from 'hoopa-logger'\n\n/**\n * Creates a database\n * @param {Object} connection\n * @param {String} dbName\n * @param {Function} done\n */\nexport const createDatabase = async (connection, dbName, done) => {\n  const databaseList = await rethinkdb.dbList().run(connection)\n  const dbAlreadyExists = databaseList.find(db => db === dbName)\n\n  if (dbAlreadyExists) {\n    await rethinkdb.dbDrop(dbName).run(connection, done)\n  }\n\n  const result = await rethinkdb.dbCreate(dbName).run(connection, done)\n\n  if (result.dbs_created) {\n    logger.info(`db ${dbName} created successfully!`)\n    return true\n  }\n\n  return false\n}\n\n/**\n * Drops a database\n * @param {Object} connection\n * @param {String} dbName\n * @param {Function} done\n */\nexport const dropDatabase = async (connection, dbName, done) => {\n  const databaseList = await rethinkdb.dbList().run(connection)\n  const dbAlreadyExists = databaseList.find(db => db === dbName)\n\n  if (dbAlreadyExists) {\n    const result = await rethinkdb.dbDrop(dbName).run(connection, done)\n\n    if (result.dbs_droped) {\n      logger.info(`db ${dbName} dropped`)\n      return true\n    }\n  }\n\n  logger.warn(`db ${dbName} does not exists!`)\n  return false\n}\n"],"file":"database.js"}