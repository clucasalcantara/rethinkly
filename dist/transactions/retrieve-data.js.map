{"version":3,"sources":["../../src/transactions/retrieve-data.js"],"names":["processResults","results","length","connection","tableName","predicate","id","name","logger","info","rethinkdb","table","run","then","cursor","toArray","err","Object","keys","get","result","predicateKeys","queryBuilder","key","value","Array","isArray","filter","data","contains","match"],"mappings":"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","sourcesContent":["/**\n * Retrieve data module\n * @memberof rethinkly\n */\nimport rethinkdb from 'rethinkdb'\nimport logger from 'hoopa-logger'\n\n/**\n * ProcessResults\n * Callback to process data on gathering, for now don't\n * need any transformation\n * @param {Array} results\n * @return {Array} results\n */\nconst processResults = results => (results && results.length > 0 ? results[0] : results)\n\n/**\n * RetrieveData\n * Grab data from database\n * @param {Object} connection\n * @param {String} tableName\n * @param {String} predicate?\n * @returns {Array||Object} results || result\n */\nexport default async (connection, tableName, predicate = false) => {\n  const { id, name } = predicate\n\n  if (!predicate) {\n    logger.info(`Searching using no predicate`)\n\n    return rethinkdb\n      .table(tableName)\n      .run(connection)\n      .then(cursor =>\n        cursor.toArray((err, results) => {\n          if (err) throw err\n\n          return processResults(results)\n        })\n      )\n  }\n\n  // ID SEARCH\n  if (id && Object.keys(predicate).length === 1) {\n    const result = await rethinkdb\n      .table(tableName)\n      .get(id)\n      .run(connection)\n      .then(result => result)\n\n    return result\n  }\n\n  if (name) {\n    delete predicate.name\n  }\n\n  const predicateKeys = Object.keys(predicate)\n  let queryBuilder = rethinkdb.table(tableName)\n\n  for (const key of predicateKeys) {\n    const value = predicate[key]\n\n    if (Array.isArray(value)) {\n      queryBuilder = queryBuilder.filter(data => data(key).contains(value))\n      delete predicate[key]\n\n      return queryBuilder\n    }\n  }\n\n  if (name) {\n    return queryBuilder\n      .filter(predicate)\n      .filter(data => data('name').match(`^${name}`))\n      .run(connection)\n      .then(cursor =>\n        cursor.toArray((err, results) => {\n          if (err) throw err\n          logger.info(`Search results: ${results.length}`)\n\n          return processResults(results)\n        })\n      )\n  }\n\n  return queryBuilder\n    .filter(predicate)\n    .run(connection)\n    .then(cursor =>\n      cursor.toArray((err, results) => {\n        if (err) throw err\n        logger.info(`Search results: ${results.length}`)\n\n        return processResults(results)\n      })\n    )\n}\n"],"file":"retrieve-data.js"}