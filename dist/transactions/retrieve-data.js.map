{"version":3,"sources":["../../src/transactions/retrieve-data.js"],"names":["processResults","results","length","connection","tableName","predicate","console","log","id","rethinkdb","table","get","run","then","result","logger","info","cursor","toArray","err","predicateKey","Object","keys","predicateValues","values","Array","isArray","JSON","stringify","filter","data","contains"],"mappings":"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","sourcesContent":["/**\n * Retrieve data module\n * @memberof rethinkly\n */\nimport rethinkdb from 'rethinkdb'\nimport logger from 'hoopa-logger'\n\n/**\n * ProcessResults\n * Callback to process data on gathering, for now don't\n * need any transformation\n * @param {Array} results\n * @return {Array} results\n */\nconst processResults = results => (results && results.length > 0 ? results[0] : results)\n\n/**\n * RetrieveData\n * Grab data from database\n * @param {Object} connection\n * @param {String} tableName\n * @param {String} predicate?\n * @returns {Array||Object} results || result\n */\nexport default async (connection, tableName, predicate = false) => {\n  console.log('Oiiiii')\n  console.log(predicate)\n  const { id } = predicate\n\n  if (id) {\n    console.log(await rethinkdb\n      .table(tableName)\n      .get(id)\n      .run(connection)\n      .then(result => result))\n    return rethinkdb\n      .table(tableName)\n      .get(id)\n      .run(connection)\n      .then(result => result)\n  }\n\n  if (!predicate) {\n    logger.info(`Searching using no predicate`)\n\n    return rethinkdb\n      .table(tableName)\n      .run(connection)\n      .then(cursor =>\n        cursor.toArray((err, results) => {\n          if (err) throw err\n\n          return processResults(results)\n        })\n      )\n  }\n\n  const predicateKey = Object.keys(predicate)[0]\n  const predicateValues = Object.values(predicate)[0]\n\n  if (Array.isArray(predicateValues)) {\n    logger.info(`Searching using the predicate ${JSON.stringify(predicate)}`)\n\n    return rethinkdb\n      .table(tableName)\n      .filter(data => data(predicateKey).contains(...predicateValues))\n      .run(connection)\n      .then(cursor =>\n        cursor.toArray((err, results) => {\n          if (err) throw err\n          logger.info(`Search resuls: ${results.length}`)\n          return processResults(results)\n        })\n      )\n  }\n\n  return rethinkdb\n    .table(tableName)\n    .filter({ [predicateKey]: predicateValues })\n    .run(connection)\n    .then(cursor =>\n      cursor.toArray((err, results) => {\n        if (err) throw err\n        logger.info(`Search resuls: ${results.length}`)\n        return processResults(results)\n      })\n    )\n}\n"],"file":"retrieve-data.js"}