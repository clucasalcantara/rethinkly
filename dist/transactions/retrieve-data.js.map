{"version":3,"sources":["../../src/transactions/retrieve-data.js"],"names":["processResults","results","length","connection","tableName","predicate","id","logger","info","rethinkdb","table","run","then","cursor","toArray","err","Object","keys","get","result","predicateKey","predicateValues","values","Array","isArray","JSON","stringify","filter","data","contains"],"mappings":";;;;;;;;;;;;;;;;;AAIA;;AACA;;AALA;;;;;AAOA;;;;;;;AAOA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,OAAO;AAAA,SAAKA,OAAO,IAAIA,OAAO,CAACC,MAAR,GAAiB,CAA5B,GAAgCD,OAAO,CAAC,CAAD,CAAvC,GAA6CA,OAAlD;AAAA,CAA9B;AAEA;;;;;;;;;;;;;;;+BAQe,iBAAOE,UAAP,EAAmBC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8BC,YAAAA,SAA9B,2DAA0C,KAA1C;AACLC,YAAAA,EADK,GACED,SADF,CACLC,EADK;;AAAA,gBAGRD,SAHQ;AAAA;AAAA;AAAA;;AAIXE,oCAAOC,IAAP;;AAJW,6CAMJC,sBACJC,KADI,CACEN,SADF,EAEJO,GAFI,CAEAR,UAFA,EAGJS,IAHI,CAGC,UAAAC,MAAM;AAAA,qBACVA,MAAM,CAACC,OAAP,CAAe,UAACC,GAAD,EAAMd,OAAN,EAAkB;AAC/B,oBAAIc,GAAJ,EAAS,MAAMA,GAAN;AAET,uBAAOf,cAAc,CAACC,OAAD,CAArB;AACD,eAJD,CADU;AAAA,aAHP,CANI;;AAAA;AAAA,kBAkBTK,EAAE,IAAIU,MAAM,CAACC,IAAP,CAAYZ,SAAZ,EAAuBH,MAAvB,KAAkC,CAlB/B;AAAA;AAAA;AAAA;;AAAA,6CAmBJO,sBACJC,KADI,CACEN,SADF,EAEJc,GAFI,CAEAZ,EAFA,EAGJK,GAHI,CAGAR,UAHA,EAIJS,IAJI,CAIC,UAAAO,MAAM;AAAA,qBAAIA,MAAJ;AAAA,aAJP,CAnBI;;AAAA;AA0BPC,YAAAA,YA1BO,GA0BQJ,MAAM,CAACC,IAAP,CAAYZ,SAAZ,EAAuB,CAAvB,CA1BR;AA2BPgB,YAAAA,eA3BO,GA2BWL,MAAM,CAACM,MAAP,CAAcjB,SAAd,EAAyB,CAAzB,CA3BX;;AAAA,iBA6BTkB,KAAK,CAACC,OAAN,CAAcH,eAAd,CA7BS;AAAA;AAAA;AAAA;;AA8BXd,oCAAOC,IAAP,yCAA6CiB,IAAI,CAACC,SAAL,CAAerB,SAAf,CAA7C;;AA9BW,6CAgCJI,sBACJC,KADI,CACEN,SADF,EAEJuB,MAFI,CAEG,UAAAC,IAAI;AAAA;;AAAA,qBAAI,SAAAA,IAAI,CAACR,YAAD,CAAJ,EAAmBS,QAAnB,kDAA+BR,eAA/B,EAAJ;AAAA,aAFP,EAGJV,GAHI,CAGAR,UAHA,EAIJS,IAJI,CAIC,UAAAC,MAAM;AAAA,qBACVA,MAAM,CAACC,OAAP,CAAe,UAACC,GAAD,EAAMd,OAAN,EAAkB;AAC/B,oBAAIc,GAAJ,EAAS,MAAMA,GAAN;;AACTR,wCAAOC,IAAP,0BAA8BP,OAAO,CAACC,MAAtC;;AACA,uBAAOF,cAAc,CAACC,OAAD,CAArB;AACD,eAJD,CADU;AAAA,aAJP,CAhCI;;AAAA;AAAA,6CA6CNQ,sBACJC,KADI,CACEN,SADF,EAEJuB,MAFI,sCAEMP,YAFN,EAEqBC,eAFrB,GAGJV,GAHI,CAGAR,UAHA,EAIJS,IAJI,CAIC,UAAAC,MAAM;AAAA,qBACVA,MAAM,CAACC,OAAP,CAAe,UAACC,GAAD,EAAMd,OAAN,EAAkB;AAC/B,oBAAIc,GAAJ,EAAS,MAAMA,GAAN;;AACTR,wCAAOC,IAAP,0BAA8BP,OAAO,CAACC,MAAtC;;AACA,uBAAOF,cAAc,CAACC,OAAD,CAArB;AACD,eAJD,CADU;AAAA,aAJP,CA7CM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/**\n * Retrieve data module\n * @memberof rethinkly\n */\nimport rethinkdb from 'rethinkdb'\nimport logger from 'hoopa-logger'\n\n/**\n * ProcessResults\n * Callback to process data on gathering, for now don't\n * need any transformation\n * @param {Array} results\n * @return {Array} results\n */\nconst processResults = results => (results && results.length > 0 ? results[0] : results)\n\n/**\n * RetrieveData\n * Grab data from database\n * @param {Object} connection\n * @param {String} tableName\n * @param {String} predicate?\n * @returns {Array||Object} results || result\n */\nexport default async (connection, tableName, predicate = false) => {\n  const { id } = predicate\n\n  if (!predicate) {\n    logger.info(`Searching using no predicate`)\n\n    return rethinkdb\n      .table(tableName)\n      .run(connection)\n      .then(cursor =>\n        cursor.toArray((err, results) => {\n          if (err) throw err\n\n          return processResults(results)\n        })\n      )\n  }\n\n  if (id && Object.keys(predicate).length === 1) {\n    return rethinkdb\n      .table(tableName)\n      .get(id)\n      .run(connection)\n      .then(result => result)\n  }\n\n  const predicateKey = Object.keys(predicate)[0]\n  const predicateValues = Object.values(predicate)[0]\n\n  if (Array.isArray(predicateValues)) {\n    logger.info(`Searching using the predicate ${JSON.stringify(predicate)}`)\n\n    return rethinkdb\n      .table(tableName)\n      .filter(data => data(predicateKey).contains(...predicateValues))\n      .run(connection)\n      .then(cursor =>\n        cursor.toArray((err, results) => {\n          if (err) throw err\n          logger.info(`Search resuls: ${results.length}`)\n          return processResults(results)\n        })\n      )\n  }\n\n  return rethinkdb\n    .table(tableName)\n    .filter({ [predicateKey]: predicateValues })\n    .run(connection)\n    .then(cursor =>\n      cursor.toArray((err, results) => {\n        if (err) throw err\n        logger.info(`Search resuls: ${results.length}`)\n        return processResults(results)\n      })\n    )\n}\n"],"file":"retrieve-data.js"}