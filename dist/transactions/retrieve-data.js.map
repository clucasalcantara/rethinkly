{"version":3,"sources":["../../src/transactions/retrieve-data.js"],"names":["processResults","results","connection","tableName","predicate","id","rethinkdb","table","run","then","cursor","toArray","err","Object","keys","length","get","result","logger","info","JSON","stringify","filter"],"mappings":";;;;;;;;;;;;;AAIA;;AACA;;AALA;;;;;AAOA;;;;;;;AAOA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,OAAO;AAAA,SAAIA,OAAJ;AAAA,CAA9B;AAEA;;;;;;;;;;;;;;;+BAQe,iBAAOC,UAAP,EAAmBC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8BC,YAAAA,SAA9B,2DAA0C,EAA1C;AACLC,YAAAA,EADK,GACED,SADF,CACLC,EADK;;AAAA,gBAGRD,SAHQ;AAAA;AAAA;AAAA;;AAAA,6CAIJE,sBACJC,KADI,CACEJ,SADF,EAEJK,GAFI,CAEAN,UAFA,EAGJO,IAHI,CAGC,UAAAC,MAAM;AAAA,qBACVA,MAAM,CAACC,OAAP,CAAe,UAACC,GAAD,EAAMX,OAAN,EAAkB;AAC/B,oBAAIW,GAAJ,EAAS,MAAMA,GAAN;AAET,uBAAOZ,cAAc,CAACC,OAAD,CAArB;AACD,eAJD,CADU;AAAA,aAHP,CAJI;;AAAA;AAAA,kBAgBTI,EAAE,IAAIQ,MAAM,CAACC,IAAP,CAAYV,SAAZ,EAAuBW,MAAvB,KAAkC,CAhB/B;AAAA;AAAA;AAAA;;AAAA,6CAiBJT,sBACJC,KADI,CACEJ,SADF,EAEJa,GAFI,CAEAX,EAFA,EAGJG,GAHI,CAGAN,UAHA,EAIJO,IAJI,CAIC,UAAAQ,MAAM;AAAA,qBAAIA,MAAJ;AAAA,aAJP,CAjBI;;AAAA;AAwBbC,oCAAOC,IAAP,yCAA6CC,IAAI,CAACC,SAAL,CAAejB,SAAf,CAA7C;;AAxBa,6CA0BNE,sBACJC,KADI,CACEJ,SADF,EAEJmB,MAFI,CAEGlB,SAFH,EAGJI,GAHI,CAGAN,UAHA,EAIJO,IAJI,CAIC,UAAAC,MAAM;AAAA,qBACVA,MAAM,CAACC,OAAP,CAAe,UAACC,GAAD,EAAMX,OAAN,EAAkB;AAC/B,oBAAIW,GAAJ,EAAS,MAAMA,GAAN;;AACTM,wCAAOC,IAAP,0BAA8BlB,OAAO,CAACc,MAAtC;;AACA,uBAAOf,cAAc,CAACC,OAAD,CAArB;AACD,eAJD,CADU;AAAA,aAJP,CA1BM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/**\n * Retrieve data module\n * @memberof rethinkly\n */\nimport rethinkdb from 'rethinkdb'\nimport logger from 'hoopa-logger'\n\n/**\n * ProcessResults\n * Callback to process data on gathering, for now don't\n * need any transformation\n * @param {Array} results\n * @return {Array} results\n */\nconst processResults = results => results\n\n/**\n * RetrieveData\n * Grab data from database\n * @param {Object} connection\n * @param {String} tableName\n * @param {String} predicate?\n * @returns {Array||Object} results || result\n */\nexport default async (connection, tableName, predicate = {}) => {\n  const { id } = predicate\n\n  if (!predicate) {\n    return rethinkdb\n      .table(tableName)\n      .run(connection)\n      .then(cursor =>\n        cursor.toArray((err, results) => {\n          if (err) throw err\n\n          return processResults(results)\n        })\n      )\n  }\n\n  if (id && Object.keys(predicate).length === 1) {\n    return rethinkdb\n      .table(tableName)\n      .get(id)\n      .run(connection)\n      .then(result => result)\n  }\n\n  logger.info(`Searching using the predicate ${JSON.stringify(predicate)}`)\n\n  return rethinkdb\n    .table(tableName)\n    .filter(predicate)\n    .run(connection)\n    .then(cursor =>\n      cursor.toArray((err, results) => {\n        if (err) throw err\n        logger.info(`Search resuls: ${results.length}`)\n        return processResults(results)\n      })\n    )\n}\n"],"file":"retrieve-data.js"}