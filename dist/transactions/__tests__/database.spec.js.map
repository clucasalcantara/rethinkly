{"version":3,"sources":["../../../src/transactions/__tests__/database.spec.js"],"names":["t","conn","isCreated","pass","dropDatabase","dropped","dbList"],"mappings":";;;;;;;;AAAA;;AACA;;AAEA,qBAAK,yDAAL;AAAA,2FAAgE,iBAAMA,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC3C,8BAD2C;;AAAA;AACxDC,YAAAA,IADwD;AAAA;AAAA,mBAExD,8BAAeA,IAAf,EAAqB,YAArB,CAFwD;;AAAA;AAIxDC,YAAAA,SAJwD,GAI5C,iCAAkBD,IAAlB,EAAwB,YAAxB,CAJ4C;;AAAA,iBAK1DC,SAL0D;AAAA;AAAA;AAAA;;AAM5DF,YAAAA,CAAC,CAACG,IAAF,CAAO,8BAAP;AAN4D,0BAOtCC,sBAPsC;AAAA;AAAA,mBAOnB,8BAPmB;;AAAA;AAAA;AAAA;AAAA,iDAOF,YAPE;;AAAA;AAOtDC,YAAAA,OAPsD;;AAQ5D,gBAAIA,OAAJ,EAAa;AACXL,cAAAA,CAAC,CAACG,IAAF,CAAO,8BAAP;AACD;;AAV2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhE;;AAAA;AAAA;AAAA;AAAA;AAcA,qBAAK,uCAAL;AAAA,4FAA8C,kBAAMH,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACzB,8BADyB;;AAAA;AACtCC,YAAAA,IADsC;AAE5C,0CAAeA,IAAf,EAAqB,cAArB;AAF4C;AAAA,mBAGvB,uBAAQA,IAAR,CAHuB;;AAAA;AAGtCK,YAAAA,MAHsC;AAAA,2BAItCF,sBAJsC;AAAA;AAAA,mBAInB,8BAJmB;;AAAA;AAAA;AAAA;AAAA,mDAIF,cAJE;;AAAA;AAM5C,gBAAIE,MAAJ,EAAYN,CAAC,CAACG,IAAF,CAAO,kBAAP;;AANgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9C;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import test from 'ava'\nimport { createDatabase, dropDatabase, checkForExistence, listAll, getConnection } from '../database'\n\ntest('[database]: should create and drops a database properly', async t => {\n  const conn = await getConnection()\n  await createDatabase(conn, 'db_example')\n\n  const isCreated = checkForExistence(conn, 'db_example')\n  if (isCreated) {\n    t.pass('database succesfully created')\n    const dropped = await dropDatabase(await getConnection(), 'db_example')\n    if (dropped) {\n      t.pass('database succesfully dropped')\n    }\n  }\n})\n\ntest('[database]: should list all databases', async t => {\n  const conn = await getConnection()\n  createDatabase(conn, 'list_example')\n  const dbList = await listAll(conn)\n  await dropDatabase(await getConnection(), 'list_example')\n\n  if (dbList) t.pass('Databases listed')\n})\n"],"file":"database.spec.js"}