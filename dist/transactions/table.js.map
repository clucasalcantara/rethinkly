{"version":3,"sources":["../../src/transactions/table.js"],"names":["createTable","connection","tableName","done","rethinkdb","tableList","run","tableAlreadyExists","find","table","logger","warn","tableCreate","info","dropTable","tableDrop"],"mappings":";;;;;;;;;;;;;AAIA;;AACA;;AALA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,WAAW;AAAA,2FAAG,iBAAOC,UAAP,EAAmBC,SAAnB,EAA8BC,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACDC,sBAAUC,SAAV,GAAsBC,GAAtB,CAA0BL,UAA1B,CADC;;AAAA;AACnBI,YAAAA,SADmB;AAEnBE,YAAAA,kBAFmB,GAEEF,SAAS,CAACG,IAAV,CAAe,UAAAC,KAAK;AAAA,qBAAIA,KAAK,KAAKP,SAAd;AAAA,aAApB,CAFF;;AAAA,iBAIrBK,kBAJqB;AAAA;AAAA;AAAA;;AAAA,6CAKhBG,wBAAOC,IAAP,iBAAqBT,SAArB,gCALgB;;AAAA;AAAA;AAAA,mBAQnBE,sBAAUQ,WAAV,CAAsBV,SAAtB,EAAiCI,GAAjC,CAAqCL,UAArC,EAAiDE,IAAjD,CARmB;;AAAA;AAAA,6CASlBO,wBAAOG,IAAP,iBAAqBX,SAArB,4BATkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXF,WAAW;AAAA;AAAA;AAAA,GAAjB;AAYP;AACA;AACA;AACA;AACA;AACA;;;;;AACO,IAAMc,SAAS;AAAA,4FAAG,kBAAOb,UAAP,EAAmBC,SAAnB,EAA8BC,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACCC,sBAAUC,SAAV,GAAsBC,GAAtB,CAA0BL,UAA1B,CADD;;AAAA;AACjBI,YAAAA,SADiB;AAEjBE,YAAAA,kBAFiB,GAEIF,SAAS,CAACG,IAAV,CAAe,UAAAC,KAAK;AAAA,qBAAIA,KAAK,KAAKP,SAAd;AAAA,aAApB,CAFJ;;AAAA,gBAIlBK,kBAJkB;AAAA;AAAA;AAAA;;AAAA,8CAKdG,wBAAOC,IAAP,iBAAqBT,SAArB,gCALc;;AAAA;AAAA;AAAA,mBAQjBE,sBAAUW,SAAV,CAAoBb,SAApB,EAA+BI,GAA/B,CAAmCL,UAAnC,EAA+CE,IAA/C,CARiB;;AAAA;AAAA,8CAShBO,wBAAOG,IAAP,iBAAqBX,SAArB,4BATgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATY,SAAS;AAAA;AAAA;AAAA,GAAf","sourcesContent":["/**\n * Table controls\n * @memberof rethinkly\n */\nimport rethinkdb from 'rethinkdb'\nimport logger from 'hoopa-logger'\n\n/**\n * Creates a table\n * @param {Object} connection\n * @param {String} dbName\n * @param {Function} done\n */\nexport const createTable = async (connection, tableName, done) => {\n  const tableList = await rethinkdb.tableList().run(connection)\n  const tableAlreadyExists = tableList.find(table => table === tableName)\n\n  if (tableAlreadyExists) {\n    return logger.warn(`table ${tableName} already exists, skipping!`)\n  }\n\n  await rethinkdb.tableCreate(tableName).run(connection, done)\n  return logger.info(`table ${tableName} created successfully!`)\n}\n\n/**\n * Drop a table\n * @param {Object} connection\n * @param {String} dbName\n * @param {Function} done\n */\nexport const dropTable = async (connection, tableName, done) => {\n  const tableList = await rethinkdb.tableList().run(connection)\n  const tableAlreadyExists = tableList.find(table => table === tableName)\n\n  if (!tableAlreadyExists) {\n    return logger.warn(`table ${tableName} doesn't exists, skipping!`)\n  }\n\n  await rethinkdb.tableDrop(tableName).run(connection, done)\n  return logger.info(`table ${tableName} dropped successfully!`)\n}\n"],"file":"table.js"}